{"version":3,"sources":["button/Button.js","final/Loader.js","final/Demo.js","my-suspense/Suspense.js","my-suspense/Demo.js","App.js","serviceWorker.js","index.js","button/button.module.css"],"names":["Button","props","react_default","a","createElement","Object","assign","className","styles","button","style","size","padding","Loader","BigComponent","React","lazy","__webpack_require__","e","then","bind","Demo","_React$useState","useState","_React$useState2","slicedToArray","show","setShow","Fragment","button_Button","onClick","Suspense","fallback","final_Loader","defaultProps","loadResource","id","time","value","arguments","length","undefined","Promise","resolve","reject","setTimeout","sleep","children","res","console","log","DynamicLoadingComponent","my_suspense_Suspense","App","final_Demo","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"4RASeA,MANf,SAAgBC,GACd,OACIC,EAAAC,EAAAC,cAAA,SAAAC,OAAAC,OAAA,CAAQC,UAAWC,IAAOC,OAAQC,MAAO,CAAEC,KAAM,GAAIC,QAAS,IAASX,KCK9DY,MARf,SAAgBZ,GACd,OACIC,EAAAC,EAAAC,cAAA,0BCCAU,EAAeC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAEtC,SAASC,IAAO,IAAAC,EACWP,IAAMQ,UAAS,GAD1BC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GACNI,EADMF,EAAA,GACAG,EADAH,EAAA,GAEd,OACItB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAC,cAACyB,EAAD,CAAQC,QAAS,kBAAMH,GAASD,KAAhC,UAEEA,GACCxB,EAAAC,EAAAC,cAACF,EAAAC,EAAM4B,SAAP,CAAgBC,SAAU9B,EAAAC,EAAAC,cAAC6B,EAAD,OACzB/B,EAAAC,EAAAC,cAACU,EAAD,QAQZO,EAAKa,aAAe,GAELb,QCpBTc,EAAe,SAAAC,GAAE,OAFT,SAACC,GAAD,IAAOC,EAAPC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,QAAf,OAA2B,IAAIG,QAAQ,SAACC,EAASC,GAAV,OAAqBC,WAAWF,EAAQL,GAAQD,KAE1ES,CAAM,IAAMV,IAYxBL,MATf,SAAkB9B,GACeA,EAAvB+B,SADe,IACLe,EAAa9C,EAAb8C,SAKlB,OAJkBZ,EAAaY,GAC1B5B,KAAK,SAAA6B,GACJC,QAAQC,IAAI,MAAMF,KAEjB9C,EAAAC,EAAAC,cAAA,kBCZH+C,EAA0BpC,IAAMC,KAAK,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAEjD,SAASC,EAAKpB,GACZ,OACIC,EAAAC,EAAAC,cAACgD,EAAD,CAAUpB,SAAS,UACjB9B,EAAAC,EAAAC,cAAC+C,EAAD,OAMR9B,EAAKa,aAAe,GAELb,ICAAgC,mLARX,OACEnD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACdL,EAAAC,EAAAC,cAACkD,EAAD,cAJWC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC,kCElInBC,EAAAC,QAAA,CAAkB/D,OAAA","file":"static/js/main.f5a1323a.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './button.module.css';\n\nfunction Button(props) {\n  return (\n      <button className={styles.button} style={{ size: 20, padding: 4 }} {...props} />\n  );\n}\n\nexport default Button;\n","import React from 'react';\n\nfunction Loader(props) {\n  return (\n      <div>\n        Loading...\n      </div>\n  );\n}\n\nexport default Loader;\n","import React from 'react';\nimport Button from '../button/Button';\nimport Loader from './Loader';\n\n// import DynamicLoadingComponent from './DynamicLoadingComponent';\nconst BigComponent = React.lazy(() => import('./BigComponent'));\n\nfunction Demo() {\n  const [ show, setShow] = React.useState(false);\n  return (\n      <React.Fragment>\n        <Button onClick={() => setShow(!show)} >TOGGLE</Button>\n        {\n          show &&\n          (<React.Suspense fallback={<Loader />}>\n            <BigComponent/>\n          </React.Suspense>)\n        }\n      </React.Fragment>\n  )\n}\n\nDemo.propTypes = {};\nDemo.defaultProps = {};\n\nexport default Demo;\n","import React from 'react';\n\n\nconst sleep = (time, value = \"value\") => new Promise((resolve, reject) => setTimeout(resolve(value), time));\n\nconst loadResource = id => sleep(1000, id);\n\n\nfunction Suspense(props) {\n  const { fallback, children } = props;\n  const suspended = loadResource(children)\n      .then(res => {\n        console.log('res',res);\n      });\n  return <div>hh</div>\n}\n\nexport default Suspense;\n","import React from 'react';\nimport Suspense from './Suspense';\nconst DynamicLoadingComponent = React.lazy(() => import('./DynamicLoadingComponent'));\n\nfunction Demo(props) {\n  return (\n      <Suspense fallback=\"Loader\">\n        <DynamicLoadingComponent />\n      </Suspense>\n  );\n}\n\nDemo.propTypes = {};\nDemo.defaultProps = {};\n\nexport default Demo;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Demo from './final/Demo';\nimport Demo2 from './my-suspense/Demo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Demo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__1FSJ8\"};"],"sourceRoot":""}