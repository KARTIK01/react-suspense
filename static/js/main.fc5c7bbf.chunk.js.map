{"version":3,"sources":["syntax/Loader.js","button/Button.js","my-suspense/InternalSuspense.js","my-suspense/InternalLoader.js","syntax/Demo.js","App.js","serviceWorker.js","index.js","button/button.module.css"],"names":["Loader","props","react_default","a","createElement","Button","Object","assign","className","styles","button","style","size","padding","InternalSuspense","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","_this$props","fallback","children","error","info","_this2","setState","window","suspended","then","Component","loadResource","id","Promise","resolve","reject","setTimeout","cache","BigComponent","fooResult","key","data","read","Demo","_React$useState","React","useState","_React$useState2","slicedToArray","show","setShow","Fragment","button_Button","onClick","my_suspense_InternalSuspense","syntax_Loader","href","lazy","__webpack_require__","e","bind","Suspense","Demo_BigComponent","defaultProps","App","component","location","indexOf","InternalLoader","syntax_Demo","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fc5c7bbf.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Loader(props) {\n  return (\n      <div>\n        Loading...\n      </div>\n  );\n}\n\nexport default Loader;\n","import React from 'react';\nimport styles from './button.module.css';\n\nfunction Button(props) {\n  return (\n      <button className={styles.button} style={{ size: 20, padding: 4 }} {...props} />\n  );\n}\n\nexport default Button;\n","import React, {Component} from 'react';\n\nclass InternalSuspense extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  render() {\n    const {fallback, children} = this.props;\n    const { hasError } = this.state;\n    if(hasError)\n      return fallback;\n    return children;\n  }\n\n  componentDidCatch(error, info) {\n   this.setState({hasError: true});\n    window.suspended.then(() => this.setState({hasError: false}));\n  }\n\n}\n\nexport default InternalSuspense;\n","import React from 'react';\nimport Loader from '../syntax/Loader';\nimport Button from '../button/Button';\nimport InternalSuspense from './InternalSuspense';\n\nconst loadResource = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => resolve(id), 1000);\n  });\n};\n\nconst cache = {};\n\nfunction read(key) {\n  if(cache[key]) {\n    return cache[key]\n  }\n  const suspended = loadResource(key)\n      .then(data => {\n        cache[key] = data;\n        return data;\n      });\n  if(!window.suspended) {\n    window.suspended =  suspended\n  }\n  throw suspended;\n}\n\nfunction BigComponent() {\n  const fooResult = read('foo');\n  return (\n    <div>\n      {fooResult}\n    </div>\n  )\n}\n\nfunction Demo() {\n  const [ show, setShow] = React.useState(false);\n  return (\n      <React.Fragment>\n        <Button onClick={() => setShow(!show)} >TOGGLE</Button>\n        {\n          show &&\n          (<InternalSuspense fallback={<Loader />}>\n            <BigComponent/>\n          </InternalSuspense>)\n        }\n        <br />\n        <a href='/'>\n          Syntax Demo\n        </a>\n      </React.Fragment>\n  )\n}\n\n\nexport default Demo;\n","import React from 'react';\nimport Button from '../button/Button';\nimport Loader from './Loader';\nconst BigComponent = React.lazy(() => import('./BigComponent'));\n\nfunction Demo() {\n  const [ show, setShow] = React.useState(false);\n  return (\n      <React.Fragment>\n        <Button onClick={() => setShow(!show)} >TOGGLE</Button>\n        {\n          show &&\n          (<React.Suspense fallback={<Loader />}>\n            <BigComponent/>\n          </React.Suspense>)\n        }\n        <br />\n        <a href='/internal-working'>\n          Internal Working\n        </a>\n      </React.Fragment>\n  )\n}\n\nDemo.propTypes = {};\nDemo.defaultProps = {};\n\nexport default Demo;\n","import React from 'react';\nimport './App.css';\nimport InternalSuspense from './my-suspense/InternalLoader';\nimport Demo from './syntax/Demo';\n\nfunction App() {\n  let component;\n  if(window.location.href.indexOf('internal-working') > 0) {\n    component = <InternalSuspense/>\n  } else {\n    component = <Demo/>\n  }\n  return (\n      <div className=\"App\">\n        {component}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__1FSJ8\"};"],"sourceRoot":""}